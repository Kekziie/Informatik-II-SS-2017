package main;


public class Optimize {

        public static final double A = 5;
        public static final double B = -2;
        
        public static void main(String[] args) {
                int max=1;
                int n=0;
                int g=1;
                
                for (int i=2;i<=12;i=i+2){
                        System.out.println("f1("+i+")x="+optimize(1,i)+"y="+evalFunc(1,(optimize(0,i))));
                }
                System.out.println("f1(-1)"+optimize(0,0)+" y="+evalFunc(1,(optimize(0,0))));
                for (int i=1;i<=7;i++){
                System.out.println("a(" +i+ ")="+row(1,Math.pow(10,i)));
                }
                System.out.println("cf="+cf(77617f,33096f));
                System.out.println("cd="+cd(77617d,33096d));}

                
        

        public static double optimize(int func, double x0) {
                double result = 0;
                
                        double x1=0;
                        while (Math.abs(x0-(x0 - 0.001 * numericalGradient(func,x0)))>Math.pow(10, -9))
                        {
                                
                                x1=x0;
                                x0=(x1-0.001*numericalGradient(func,x1));
                        }
                        result = x1;
                                        
                return result;// TODO - return the actual result here
        }
        
        public static double evalFunc(int func, double x) {
                if(func==0)
                        return f1(x);
                return f2(x);                                
        }
        
        public static double f1(double x) {
                return 1.84+1.42*x-2.4*Math.pow(x, 2)+0.91*Math.pow(x, 3)-0.124*Math.pow(x, 4)+ 0.0055*Math.pow(x, 5);
                                
        }
        
        public static double f2(double x) {
                x=x-A;
                double result = Math.pow(x, 2)-Math.abs(B);
                return result;
        }        

        public static double numericalGradient(int func, double x) {
                ; // TODO calculate the numerical gradient
                
                        double result = 0;
                        double h = 0.00001;
                        if(func==0) result= (f1(x+h)-f1(x-h))/(2*h);
                        else result= (f2(x+h)- f2(x-h))/(2*h);
                        
                        
                        return result;
                        
                }

                public static double row( double a,double d){
                        for(int k=1;k<=d;k++){
                                a+=((Math.pow(-1, k)/(2*k+1)));
                        }
                        return 4*a;
                }
                public static float cf(float x, float y){
                        float result=0f;
                        result=(float) (333.75f*(float)Math.pow(y,6f)+((float)Math.pow(x,2f)*(11f*(float)Math.pow(x,2f)*(float)Math.pow(y,2f)-(float)Math.pow(y,6f)-121f*(float)Math.pow(y,4f)-2f))+5.5f*(float)Math.pow(y,8f)+x/(2f*y));
                        
                        return result;
                }
                public static double cd(double x, double y){
                        double result=0d;
                        result=333.75*Math.pow(y,6)+(Math.pow(x,2)*(11*Math.pow(x,2)*Math.pow(y,2)-Math.pow(y,6)-121*Math.pow(y,4)-2))+5.5*Math.pow(y,8)+x/(2*y);
                        
                        return result;}}